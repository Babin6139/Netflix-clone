{"version":3,"sources":["axios.js","Request.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","origina_name","overview","substr","Nav","show","handleshow","transitionNavBar","window","scrollY","history","useHistory","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","unsubscribe","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6ZAMeA,E,OAJAC,EAAMC,OAAO,CACxBC,QAAQ,iCCHNC,EAAQ,mCAaCC,EAXA,CACXC,cAAc,6BAAD,OAA8BF,EAA9B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAc,4BAAD,OAA6BJ,EAA7B,mBACbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,2BAAD,OAA4BN,EAA5B,mBACjBO,kBAAkB,2BAAD,OAA4BP,EAA5B,mBACjBQ,mBAAmB,2BAAD,OAA4BR,EAA5B,sBAClBS,mBAAmB,2BAAD,OAA4BT,EAA5B,oB,OC0CPU,MAhDf,WAAmB,IAiBOC,EAAOC,EAjBf,EAEYC,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,KAqBd,OAjBAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIjB,EAASE,uBAD3C,cACUgB,EADV,OAEIJ,EACII,EAAQC,KAAKC,QACTC,KAAKC,MAAMD,KAAKE,SAAUL,EAAQC,KAAKC,QAAQI,OAAO,KAJlE,kBAOWN,GAPX,4CADY,uBAAC,WAAD,wBAUZO,KACD,IAOC,wBAAQC,UAAU,SACdC,MAAO,CACHC,eAAe,QACfC,gBAAgB,4CAAD,cAA6ChB,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAOiB,cAApD,MACfC,mBAAmB,iBAJ3B,SAOI,sBAAKL,UAAU,mBAAf,UACI,oBAAIA,UAAU,gBAAd,UACU,OAALb,QAAK,IAALA,OAAA,EAAAA,EAAOmB,SAAP,OAAgBnB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOoB,QAAvB,OAA+BpB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOqB,gBAE3C,sBAAKR,UAAU,kBAAf,UACI,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEJ,oBAAIA,UAAU,sBAAd,UApBUhB,EAqBG,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOsB,SArBJxB,EAqBa,KApBrB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO0B,OAAO,EAAEzB,EAAE,GAAK,MAAOD,KAsBtD,qBAAKgB,UAAU,6B,sBCLhBW,MApCf,WAAgB,IAAD,EACgBzB,oBAAS,GADzB,mBACJ0B,EADI,KACEC,EADF,KAELC,EAAiB,WAChBC,OAAOC,QAAU,IAChBH,GAAW,GAEXA,GAAW,IAGbI,EAAQC,cAMd,OALA7B,qBACC,WAEG,OADA0B,OAAOI,iBAAiB,SAASL,GAC1B,kBAAIC,OAAOK,oBAAoB,SAASN,MAChD,IAEC,qBAAKd,UAAS,cAASY,GAAQ,cAA/B,SACI,sBAAKZ,UAAU,gBAAf,UACA,qBACIqB,QAAS,kBAAIJ,EAAQK,KAAK,MAC1BtB,UAAU,YACVuB,IAAI,kEACJC,IAAI,KAER,qBACIH,QAAS,kBAAIJ,EAAQK,KAAK,aAC1BtB,UAAU,cACVuB,IAAI,0EACJC,IAAI,W,MCOLC,MAlCf,YAAiD,IAAnCnB,EAAkC,EAAlCA,MAAMoB,EAA4B,EAA5BA,SAA4B,IAAnBC,kBAAmB,WAChBzC,mBAAS,IADO,mBACrC0C,EADqC,KAC7BC,EAD6B,KAY5C,OATAxC,qBAAU,WAAI,4CACV,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAImC,GADlC,cACUlC,EADV,OAEIqC,EAAUrC,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CADU,uBAAC,WAAD,wBAOVO,KACF,CAAC2B,IAEC,sBAAK1B,UAAU,MAAf,UACI,6BAAKM,IACL,qBAAKN,UAAU,eAAf,SACK4B,EAAOE,KAAI,SAAA3C,GAAK,OACXwC,GAAcxC,EAAM4C,cACxBJ,GAAcxC,EAAMiB,gBAClB,qBACAJ,UAAS,sBAAiB2B,GAAc,oBAExCJ,IAAG,UApBJ,wCAoBI,OACCI,EAAaxC,EAAM4C,YAAc5C,EAAMiB,eACvCoB,IAAKrC,EAAMoB,MAHVpB,EAAM6C,aCmBhBC,MAtCf,WACI,OACI,sBAAKjC,UAAU,aAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACIM,MAAM,oBACNoB,SAAUpD,EAASE,sBACnBmD,YAAU,IAEd,cAAC,EAAD,CACIrB,MAAM,eACNoB,SAAUpD,EAASC,gBAEvB,cAAC,EAAD,CACI+B,MAAM,gBACNoB,SAAUpD,EAASI,oBAEvB,cAAC,EAAD,CACI4B,MAAM,gBACNoB,SAAUpD,EAASK,oBAEvB,cAAC,EAAD,CACI2B,MAAM,gBACNoB,SAAUpD,EAASM,oBAEvB,cAAC,EAAD,CACI0B,MAAM,UACNoB,SAAUpD,EAASO,qBAEvB,cAAC,EAAD,CACIyB,MAAM,gBACNoB,SAAUpD,EAASQ,yB,wBCvB7BoD,GAFYC,IAASC,cAVJ,CACnBC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIEC,YACVT,IAASD,Q,MCkCLW,MA9Cf,WACI,IAAMC,EAASC,iBAAO,MAChBC,EAAYD,iBAAO,MAwBzB,OACI,qBAAK/C,UAAU,eAAf,SACI,iCACI,yCACA,uBAAOiD,IAAKH,EAAUI,KAAK,QAAQC,YAAY,UAC/C,uBAAOF,IAAKD,EAAaE,KAAK,WAAWC,YAAY,aACrD,wBAAQD,KAAK,SAAS7B,QAjBrB,SAAC+B,GACVA,EAAEC,iBACFnB,EAAKoB,2BACDR,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACnBC,MAAK,SAACC,GACHC,QAAQC,IAAIF,MACbG,OAAM,SAACC,GACNC,MAAMD,EAAME,aASZ,qBACA,+BACG,sBAAMhE,UAAU,qBAAhB,6BAGC,sBAAMqB,QAlCP,SAAC+B,GACZA,EAAEC,iBACFnB,EAAK+B,+BACDnB,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACnBC,MAAK,SAACC,OAEJG,OAAM,SAACC,GACNC,MAAMD,EAAME,aA0BiBhE,UAAU,qBAAnC,mCCWLkE,MAhDf,WAAwB,IAAD,EACShF,oBAAS,GADlB,mBACZiF,EADY,KACJC,EADI,KAGnB,OACI,qBAAKpE,UAAU,cAAf,SACI,sBAAKA,UAAU,0BAAf,UACI,qBACAA,UAAU,oBACVuB,IAAI,kEACJC,IAAI,KACJ,wBAAQxB,UAAU,sBACdqB,QAAS,kBAAI+C,GAAU,IAD3B,qBAKA,qBAAKpE,UAAU,0BAGf,qBAAKA,UAAU,oBAAf,SACKmE,EACG,cAAC,EAAD,IAEA,qCACA,0EACA,oEACA,wGAIA,qBAAKnE,UAAU,qBAAf,SACI,iCACI,uBAAOkD,KAAK,QAAQC,YAAY,kBAChC,wBACI9B,QAAS,kBAAI+C,GAAU,IAC3BpE,UAAU,0BAFV,yC,gBCjCnBqE,EAAYC,YAAY,CACnC/D,KAAM,OACNgE,aAAc,CACZC,KAAM,MAERC,SAAU,CACRC,MAAM,SAACC,EAAOC,GACZD,EAAMH,KAAKI,EAAOC,SAEpBC,OAAO,SAACH,GACNA,EAAMH,KAAK,S,EAKaH,EAAUU,QAA1BL,E,EAAAA,MAAMI,E,EAAAA,OAEPE,EAAa,SAAAL,GAAK,OAAIA,EAAMH,KAAKA,MAE/BH,IAAf,Q,MCWeY,MA1Bf,WACI,IAAMT,EAAKU,YAAYF,GACvB,OACI,sBAAKhF,UAAU,gBAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACI,8CACA,sBAAKA,UAAU,sBAAf,UACI,qBACAuB,IAAI,0EACJC,IAAI,KACJ,sBAAKxB,UAAU,yBAAf,UACI,6BAAKwE,EAAKW,QACV,sBAAKnF,UAAU,uBAAf,UACI,uCACA,sBACA,wBAAQqB,QAAS,kBAAIa,EAAKkD,WAAWpF,UAAU,yBAA/C,sCC6BbqF,MApCf,WACE,IAAMb,EAAKU,YAAYF,GACjBM,EAASC,cAgBf,OAdAlG,qBAAU,WACR,IAAMmG,EAAYtD,EAAKuD,oBAAmB,SAAAC,GAUxC,OATGA,GACD/B,QAAQC,IAAI8B,GACZJ,EAASZ,EAAM,CACbiB,IAAID,EAASC,IACbR,MAAMO,EAASP,UAGjBG,EAASR,KAEHU,OAEV,CAACF,IAED,qBAAKtF,UAAU,MAAf,SACE,cAAC,IAAD,UACIwE,EACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoB,KAAK,WAAZ,SACE,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,SANK,cAAC,EAAD,SCjCFE,cAAe,CAC5BC,QAAS,CACPvB,KAAMwB,KCOUC,QACW,cAA7BlF,OAAOmF,SAASC,UAEe,UAA7BpF,OAAOmF,SAASC,UAEhBpF,OAAOmF,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,kB","file":"static/js/main.c3413d14.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance=axios.create({\n    baseURL:\"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","const API_KEY=\"2dabd3ecfe97077ce2a37363785680e9\";\n\nconst requests={\n    fetchTrending:`trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useEffect, useState } from 'react'\nimport './Banner.css'\nimport axios from \"./axios\"\nimport requests from \"./Request\"\nfunction Banner() {\n\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData(){\n            const request=await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random()* request.data.results.length-1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    }, [])\n\n        function truncate(string,n){\n            return string?.length > n ? string.substr(0,n-1) + '...': string;\n        }\n\n    return (\n        <header className='banner'\n            style={{\n                backgroundSize:\"cover\",\n                backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition:\"Center Center\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.origina_name}\n                </h1>\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My List</button>\n                </div>\n                <h1 className=\"banner__description\">\n                    {truncate(movie?.overview,150)}\n                </h1>\n                <div className=\"banner__fadeBotton\">\n\n                </div>\n            </div>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport \"./Nav.css\"\nfunction Nav() {\n    const [show, handleshow] = useState(false);\n    const transitionNavBar=()=>{\n        if(window.scrollY > 100){\n            handleshow(true);\n        }else{\n            handleshow(false);\n        }\n    }\n    const history=useHistory();\n    useEffect\n    (() => {\n        window.addEventListener(\"scroll\",transitionNavBar);\n        return ()=>window.removeEventListener(\"scroll\",transitionNavBar);\n    }, [])\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <div className=\"nav__contents\">\n            <img \n                onClick={()=>history.push(\"/\")}\n                className=\"nav__logo\"\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                alt=\"\"\n            />\n            <img\n                onClick={()=>history.push(\"/profile\")}\n                className=\"nav__avatar\"\n                src=\"https://i.pinimg.com/736x/4b/0c/d0/4b0cd02569a15ece506329fd82c83351.jpg\"\n                alt=\"\"\n            />\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Nav\n","import React, { useEffect, useState } from 'react'\nimport \"./Row.css\";\nimport axios from './axios'\n\nfunction Row({title,fetchUrl,isLargeRow=false}) {\n    const [movies, setMovies] = useState([]);\n    const base_url=\"https://image.tmdb.org/t/p/original/\";\n    useEffect(()=>{\n        async function fetchData(){\n            const request=await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    },[fetchUrl])\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map(movie=>(\n                    ((isLargeRow && movie.poster_path) ||\n                (!isLargeRow && movie.backdrop_path)) && (\n                    <img \n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\n                    }`} alt={movie.name}/>\n                )\n                    \n                ))}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react'\nimport Banner from '../Banner'\nimport \"./HomeScreen.css\"\nimport Nav from '../Nav'\nimport requests from '../Request'\nimport Row from '../Row'\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n            <Nav />\n            <Banner />\n            <Row \n                title='NETFLIX ORIGINALS'\n                fetchUrl={requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row \n                title='Trending Now'\n                fetchUrl={requests.fetchTrending}\n            />\n            <Row \n                title='Action Movies'\n                fetchUrl={requests.fetchActionMovies}\n            />\n            <Row \n                title='Comedy Movies'\n                fetchUrl={requests.fetchComedyMovies}\n            />\n            <Row \n                title='Horror Movies'\n                fetchUrl={requests.fetchHorrorMovies}\n            />\n            <Row \n                title='Romance'\n                fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row \n                title='Documentaries'\n                fetchUrl={requests.fetchDocumentaries}\n            />\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import firebase from 'firebase'\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCTiaqK78ujybqhA09AiEh2Lcoa-qzUOlM\",\n    authDomain: \"netflix-clone-96f50.firebaseapp.com\",\n    projectId: \"netflix-clone-96f50\",\n    storageBucket: \"netflix-clone-96f50.appspot.com\",\n    messagingSenderId: \"340137778396\",\n    appId: \"1:340137778396:web:a1215875e2548554e56819\",\n    measurementId: \"G-H0X5SM0Q0Q\"\n  };\n\nconst firebaseApp=firebase.initializeApp(firebaseConfig);\nconst db=firebaseApp.firestore();\nconst auth=firebase.auth();\n\nexport {auth}\nexport default db;","import React, { useRef } from 'react'\nimport { auth } from '../firebase';\nimport \"./SignupScreen.css\"\nfunction SignupScreen() {\n    const emailRef=useRef(null)\n    const passwordRef=useRef(null);\n    const register=(e)=>{\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value)\n            .then((authUser)=>{\n\n            }).catch((error)=>{\n                alert(error.message)\n            })\n    }\n\n    const signIn=(e)=>{\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value)\n            .then((authUser)=>{\n                console.log(authUser);\n            }).catch((error)=>{\n                alert(error.message)\n            })\n    }\n    return (\n        <div className=\"signupScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n                <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\n                <h4>\n                   <span className=\"signupScreen__gray\">\n                   New to Netflix? \n                    </span>\n                    <span onClick={register} className=\"signupScreen__link\">  \n                    Sign Up now.\n                    </span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen\n","import React, { useState } from 'react'\nimport \"./LoginScreen.css\"\nimport SignupScreen from './SignupScreen';\nfunction LoginScreen() {\n    const [signIn, setSignIn] = useState(false);\n\n    return (\n        <div className=\"loginScreen\">\n            <div className=\"loginScreen__background\">\n                <img \n                className=\"loginScreen__logo\"\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                alt=\"\" />\n                <button className='loginScreen__button'\n                    onClick={()=>setSignIn(true)}\n                >\n                    Sign In\n                </button>\n                <div className=\"loginScreen__gradient\">\n\n                </div>\n                <div className=\"loginScreen__body\">\n                    {signIn ? (\n                        <SignupScreen />\n                    ): (\n                        <>\n                        <h1>Unlimited films, TV programmes and more.</h1>\n                        <h2>Watch anywhere. Cancel at any time</h2>\n                        <h3>\n                            Ready to watch? Enter your email to create or restart \n                            your membership.\n                        </h3>\n                        <div className=\"loginScreen__input\">\n                            <form>\n                                <input type=\"email\" placeholder=\"Email Address\"/>\n                                <button\n                                    onClick={()=>setSignIn(true)}                                \n                                className=\"loginScreen__getStarted\">\n                                    Get Started\n                                </button>\n                            </form>\n                        </div>\n                    </>\n                    )}\n                    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login:(state, action)=>{\r\n      state.user=action.payload\r\n    },\r\n    logout:(state)=>{\r\n      state.user=null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {login,logout} = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport { auth } from '../firebase'\nimport Nav from '../Nav'\nimport \"./ProfileScreen.css\"\nfunction ProfileScreen() {\n    const user=useSelector(selectUser)\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen__body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen__info\">\n                    <img \n                    src=\"https://i.pinimg.com/736x/4b/0c/d0/4b0cd02569a15ece506329fd82c83351.jpg\" \n                    alt=\"\"/>\n                    <div className=\"profileScreen__details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen__plans\">\n                            <h3>Plans</h3>\n                            <p></p>\n                            <button onClick={()=>auth.signOut()} className='profileScreen__signOut'>Sign Out</button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport { auth } from './firebase';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\nfunction App() {\r\n  const user=useSelector(selectUser);\r\n  const dispatch=useDispatch();\r\n  \r\n  useEffect(()=>{\r\n    const unsubscribe=auth.onAuthStateChanged(userAuth=>{\r\n      if(userAuth){\r\n        console.log(userAuth);\r\n        dispatch(login({\r\n          uid:userAuth.uid,\r\n          email:userAuth.email\r\n        }))\r\n      }else{\r\n        dispatch(logout())\r\n      }\r\n      return  unsubscribe\r\n    })\r\n  },[dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ?(<LoginScreen/>):(\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n          <Route exact path=\"/\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n        )}\r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}